#ii
#abc
count:int = 0
n:int = 42 #comment
i:int = 0
def foo(s: str) -> int:
    return len(s) #comment after return
def foo(s: str) -> int:
   return True
# x**y
def exp(x: int, y: int) -> int: #pos function declaration comment
    #idented comment
	a: int = 0
	def f(i: int) -> int:
		#nonlocal a
		def geta() -> int:
			return a*2
		if i <= 0: #if comment
			return geta(hello)
		else:
			a = a * x
			return f(i-1)
	return f(y)

class bar(pp):
    p: bool = True
    q: bool = False
    def baz(self:"bar", xx: [int]) -> str:
        global count
        x:int = 0
        y:int = 1

        def qux(y: int) -> object:
            nonlocal x
            if x > y:
                x = -1 #comment after asign

        for x in xx: #after for
            self.p = x == 2

        qux(0)
        count = count + 1

        while x <= 0:
            if self.p:
                xx[0] = xx[1]
                self.p = not self.p
                x = x + 1
            elif foo("Long"[0]) == 1:
                self.p = self is None

        return "Nope"

print(bar().baz([1,2]))

while i <= n:
	print(exp(2, i % 31))
	i = i + 1
if(len(s)==8):
    print("adsf")
if(True and False):
    list = [True, False, None] #for this to work needs target implementation in translate
state = "nice" if is_nice else "not nice"
myStr = input()
myStr2 = input()
#translate this comment